[{"F:\\firebase-todoapp\\src\\index.js":"1","F:\\firebase-todoapp\\src\\App.js":"2","F:\\firebase-todoapp\\src\\reportWebVitals.js":"3","F:\\firebase-todoapp\\src\\components\\Todo.js":"4","F:\\firebase-todoapp\\src\\components\\TodoItem.js":"5","F:\\firebase-todoapp\\src\\components\\Input.js":"6","F:\\firebase-todoapp\\src\\components\\Filter.js":"7","F:\\firebase-todoapp\\src\\lib\\util.js":"8","F:\\firebase-todoapp\\src\\hooks\\FbStorage.js":"9","F:\\firebase-todoapp\\src\\lib\\firebase.js":"10","F:\\firebase-todoapp\\src\\components\\Login.js":"11"},{"size":517,"mtime":1656461764190,"results":"12","hashOfConfig":"13"},{"size":1560,"mtime":1656469227908,"results":"14","hashOfConfig":"13"},{"size":375,"mtime":1656461764192,"results":"15","hashOfConfig":"13"},{"size":2016,"mtime":1656461764187,"results":"16","hashOfConfig":"13"},{"size":407,"mtime":1656461764188,"results":"17","hashOfConfig":"13"},{"size":616,"mtime":1656461764186,"results":"18","hashOfConfig":"13"},{"size":694,"mtime":1656461764186,"results":"19","hashOfConfig":"13"},{"size":68,"mtime":1656461764191,"results":"20","hashOfConfig":"13"},{"size":1105,"mtime":1656467876668,"results":"21","hashOfConfig":"13"},{"size":2391,"mtime":1656469127287,"results":"22","hashOfConfig":"13"},{"size":376,"mtime":1656469075534,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"yztb61",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"26"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"26"},"F:\\firebase-todoapp\\src\\index.js",[],["53","54"],"F:\\firebase-todoapp\\src\\App.js",["55"],"import React, { useEffect, useState }  from 'react'\r\n\r\n/* スタイルシート */\r\nimport './styles/main.css';\r\n\r\n/* コンポーネント */\r\nimport Todo from './components/Todo';\r\nimport Login from \"./components/Login\";\r\n\r\nimport { auth, storeUserInfo, updateUser } from \"./lib/firebase\";\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [user, setUser] = useState([]);\r\n  \r\n  useEffect(() => {\r\n    auth.onAuthStateChanged(async (user) => {\r\n      setLoading(false);\r\n      let newUser = null;\r\n      if (user) {\r\n        newUser = await storeUserInfo(user);\r\n      }\r\n      setUser(newUser);\r\n    });\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    auth.signOut();\r\n  };\r\n  \r\n  const handleImageChanged = async downlodUrl => {\r\n    await updateUser(user, downlodUrl);\r\n  }\r\n  \r\n  const HeaderContent = () => {\r\n    if (user) {\r\n      return (\r\n        <div class=\"navbar-end\">\r\n          <div class=\"navbar-item\">\r\n            {user.name}\r\n          </div>\r\n          <div class=\"navbar-item\">\r\n            <button class=\"button is-danger is-light is-small\" onClick={logout} > Logout</button>\r\n          </div>\r\n        </div >\r\n      )\r\n    } else {\r\n      return (<Login />)\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className=\"container is-fluid\">\r\n      <header class=\"navbar\">\r\n        {loading ? (\r\n          <p>\r\n            LOADING.....\r\n          </p>\r\n        ) : (\r\n          <HeaderContent />\r\n        )}\r\n      </header >\r\n      <div>\r\n        {user && <Todo />}\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;","F:\\firebase-todoapp\\src\\reportWebVitals.js",[],"F:\\firebase-todoapp\\src\\components\\Todo.js",["56","57","58"],"import React, { useState } from 'react';\r\n\r\n/* コンポーネント */\r\nimport TodoItem from './TodoItem';\r\nimport Input from './Input';\r\nimport Filter from './Filter';\r\n\r\n/* カスタムフック */\r\n// import useStorage from '../hooks/storage';\r\nimport useFbStorage from '../hooks/FbStorage';\r\n\r\n/* ライブラリ */\r\nimport {getKey} from \"../lib/util\";\r\n\r\nfunction Todo() {\r\n  const [items, addItem, updateItem, clearItems] = useFbStorage();\r\n  \r\n  const [filter, setFilter] = React.useState('ALL');\r\n\r\n  const displayItems = items.filter(item => {\r\n    if (filter === 'ALL') return true;\r\n    if (filter === 'TODO') return !item.done;\r\n    if (filter === 'DONE') return item.done;\r\n  });\r\n  \r\n  const handleCheck = checked => {\r\n    // const newItems = items.map(item => {\r\n    //   if (item.key === checked.key) {\r\n    //     item.done = !item.done;\r\n    //   }\r\n    //   return item;\r\n    // });\r\n    updateItem(checked);\r\n  };\r\n  \r\n  // const handleAdd = text => {\r\n  //   updateItem([...items, { key: getKey(), text, done: false }]);\r\n  // };\r\n  \r\n  const handleFilterChange = value => setFilter(value);\r\n\r\n  return (\r\n    <article class=\"panel is-danger\">\r\n      <div className=\"panel-heading\">\r\n        <span class=\"icon-text\">\r\n          <span class=\"icon\">\r\n            <i class=\"fas fa-calendar-check\"></i>\r\n          </span>\r\n          <span> ITSS Todoアプリ</span>\r\n        </span>\r\n      </div>\r\n      <Input onAdd={addItem} />\r\n      <Filter\r\n        onChange={handleFilterChange}\r\n        value={filter}\r\n      />\r\n      {displayItems.map(item => (\r\n        <TodoItem \r\n          key={item.id}\r\n          item={item}\r\n          onCheck={handleCheck}\r\n        />\r\n      ))}\r\n      <div className=\"panel-block\">\r\n        {displayItems.length} items\r\n      </div>\r\n      <div className=\"panel-block\">\r\n        <button className=\"button is-light is-fullwidth\" onClick={clearItems}>\r\n          全てのToDoを削除\r\n        </button>\r\n      </div>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Todo;","F:\\firebase-todoapp\\src\\components\\TodoItem.js",[],"F:\\firebase-todoapp\\src\\components\\Input.js",["59"],"import React, { useState } from 'react';\r\n\r\nfunction Input( { onAdd } ) {\r\n  const [text, setText] = React.useState('');\r\n\r\n  const handleChange = e => setText(e.target.value);\r\n\r\n  const handleKeyDown = e => {\r\n    if (e.keyCode === 13) {\r\n      onAdd({text, done:false});\r\n      setText('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"panel-block\">\r\n      <input\r\n        class=\"input\"\r\n        type=\"text\"\r\n        placeholder=\"Todoを入力してください\"\r\n        value={text}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","F:\\firebase-todoapp\\src\\components\\Filter.js",["60","61","62"],"function Filter({ value, onChange }) {\r\n\r\n  const handleClick = (key, e) => {\r\n    e.preventDefault();\r\n    onChange(key);\r\n  };\r\n\r\n  return (\r\n    <div className=\"panel-tabs\">\r\n      <a\r\n        href=\"#\"\r\n        onClick={handleClick.bind(null, 'ALL')}\r\n        className={value === 'ALL' ?  'is-active' : ''}\r\n      >全て</a>\r\n      <a\r\n        href=\"#\"\r\n        onClick={handleClick.bind(null, 'TODO')}\r\n        className={value === 'TODO' ?  'is-active' : ''}\r\n      >未完了</a>\r\n      <a\r\n        href=\"#\"\r\n        onClick={handleClick.bind(null, 'DONE')}\r\n        className={value === 'DONE' ?  'is-active' : ''}\r\n      >完了済み</a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Filter","F:\\firebase-todoapp\\src\\lib\\util.js",[],"F:\\firebase-todoapp\\src\\hooks\\FbStorage.js",["63"],"import { useState, useEffect } from 'react';\r\n\r\nimport { addFirebaseItem, updateFirebaseItem, getFirebaseItems, clearFirebaseItem } from \"../lib/firebase\";\r\n\r\nfunction useFbStorage() {\r\n  const [items, setItems] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getItems();\r\n  }, [items]);\r\n\r\n  const getItems = async () => {\r\n    const _items = await getFirebaseItems();\r\n    setItems(_items);\r\n  };\r\n\r\n  const addItem = async item => {\r\n    const newItem = { text: item.text, done: item.done };\r\n    await addFirebaseItem(newItem);\r\n    setItems([...items, newItem]);\r\n  };\r\n\r\n  const updateItem = async checked => {\r\n    const changes = { done: !checked.done };\r\n    await updateFirebaseItem(changes, checked.id);\r\n    const newItems = items.map((item) => {\r\n      if (item.id === checked.id) {\r\n        item = { ...item, changes}\r\n      }\r\n      return item;\r\n    })\r\n    setItems(newItems);\r\n  }\r\n\r\n  const clearItems = () => {\r\n    items.map(item => {\r\n      clearFirebaseItem(item);\r\n    })\r\n    setItems([]);\r\n  };\r\n\r\n  return [items, addItem, updateItem, clearItems];\r\n}\r\n\r\nexport default useFbStorage;","F:\\firebase-todoapp\\src\\lib\\firebase.js",[],"F:\\firebase-todoapp\\src\\components\\Login.js",["64"],"import React from 'react';\r\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\r\n\r\n/* ライブラリ */\r\nimport { firebase, auth, uiConfig } from \"../lib/firebase\";\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"column panel-block\">\r\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={auth} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;",{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":31,"column":9,"nodeType":"71","messageId":"72","endLine":31,"endColumn":27},{"ruleId":"69","severity":1,"message":"73","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"69","severity":1,"message":"74","line":13,"column":9,"nodeType":"71","messageId":"72","endLine":13,"endColumn":15},{"ruleId":"75","severity":1,"message":"76","line":20,"column":42,"nodeType":"77","messageId":"78","endLine":20,"endColumn":44},{"ruleId":"69","severity":1,"message":"73","line":1,"column":17,"nodeType":"71","messageId":"72","endLine":1,"endColumn":25},{"ruleId":"79","severity":1,"message":"80","line":10,"column":7,"nodeType":"81","endLine":14,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":15,"column":7,"nodeType":"81","endLine":19,"endColumn":8},{"ruleId":"79","severity":1,"message":"80","line":20,"column":7,"nodeType":"81","endLine":24,"endColumn":8},{"ruleId":"75","severity":1,"message":"82","line":36,"column":20,"nodeType":"77","messageId":"83","endLine":36,"endColumn":22},{"ruleId":"69","severity":1,"message":"84","line":5,"column":10,"nodeType":"71","messageId":"72","endLine":5,"endColumn":18},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"no-unused-vars","'handleImageChanged' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'getKey' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","Array.prototype.map() expects a return value from arrow function.","expectedInside","'firebase' is defined but never used.","no-global-assign","no-unsafe-negation"]